#include<iostream>
#include<cstring>
#include<queue>

using namespace std;

bool graph[101][101];
int min = 10001;
int m, n, x = 0, y = 0, cnt = 1, recu;



void bfs() {
	queue <pair<int, int>> q;
	q.push(make_pair(0, 0));
	graph[y][x] = true;
	cnt++;

	while (!q.empty()) {
		y = q.front().first;
		x = q.front().second;
		q.pop();
		int a, b;
		if (!graph[y][x + 1] && x + 1 != m) {
			a = y, b = x + 1;
			q.push(make_pair(a, b));
			graph[a][b] = true;
		}
		if (!graph[y - 1][x] && y - 1 != n) {
			a = y - 1, b = x;
			q.push(make_pair(a, b));
			graph[a][b] = true;
		}
		if (!graph[y + 1][x] && y != 0) {
			a = y + 1, b = x;
			q.push(make_pair(a, b));
			graph[a][b] = true;
		}

	}
}

int main() {
	ios::sync_with_stdio(false);
	cin.tie(NULL);
	cout.tie(NULL);

	string s;

	cin >> n >> m;

	for (int i = 0; i < n; i++) {
		cin >> s;
		for (int j = 0; j < m; j++) {
			if (s[j] == '1')
				graph[i][j] = 0;
			else if (s[j] == '1')
				graph[i][j] = 0;
		}
	}

	bfs();

	cout << cnt;

	return 0;
}
/*
2178 미로 탐색

*/
#include<iostream>
#include<cstring>

using namespace std;

bool graph[101][101], esca;;
int n, m, x = 0, y = 0, cnt = 1;

void dfs(int a, int b) {
	if ((a == n - 1 && b == m - 1) || esca ) return;

	for (int i = 0; i < 3; i++) {
		if (!graph[a][b + 1] && b + 1 != m) {
			y = a, x = b + 1;
			cnt++;
			dfs(y, x);
		}
		else if (!graph[a + 1][b] && a + 1 != n) {
			y = a - 1, x = b;
			cnt++;
			dfs(y, x);
		}
		else if (!graph[a + 1][b] && a != 0) {
			y = a + 1, x = b;
			cnt++;
			dfs(y, x);
		}
		else if (a == n - 1 && b == m - 1)
			esca = true;
		else
			cnt = 10001;
	}
}


void dfs1(int a, int b) {
	if ((a == n - 1 && b == m - 1) || esca) return;

	for (int i = 0; i < 3; i++) {
		if (!graph[a + 1][b] && a + 1 != n) {
			y = a - 1, x = b;
			cnt++;
			dfs(y, x);
		}
		else if (!graph[a][b + 1] && b + 1 != m) {
			y = a, x = b + 1;
			cnt++;
			dfs(y, x);
		}
		else if (!graph[a + 1][b] && a != 0) {
			y = a + 1, x = b;
			cnt++;
			dfs(y, x);
		}
		else if (a == n - 1 && b == m - 1)
			esca = true;
		else
			cnt = 10001;
	}
}

int main() {
	ios::sync_with_stdio(false);
	cin.tie(NULL);
	cout.tie(NULL);

	int min;
	string s;

	cin >> n >> m;

	for (int i = 0; i < n; i++) {
		cin >> s;
		for (int j = 0; j < m; j++) {
			if (s[j] == '1')
				graph[i][j] = 0;
			else if (s[j] == '0')
				graph[i][j] = 1;
		}
	}

	dfs(0, 0);
	cout << "cnt : " << cnt << endl;
	min = cnt;
	cnt = 1;
	dfs1(0, 0);
	cout << "cnt : " << cnt << endl;
	cnt = (min < cnt) ? min : cnt;

	cout << cnt;

	return 0;
}
/*
2178 미로 탐색
dfs
*/
#include<iostream>
#include<cstring>
#include<queue>

using namespace std;

bool graph[101][101];
int m, n, x = 0, y = 0, cnt;

void bfs() {
	queue <pair<int, int>> q;
	queue <int> move;
	q.push({ 0, 0 });
	move.push(1);
	graph[y][x] = true;

	while (!q.empty()) {
		y = q.front().first;
		x = q.front().second;
		cnt = move.front();
		q.pop();
		move.pop();
		if (y == n - 1 && x == m - 1)
			break;
		cnt++;
		if (!graph[y][x + 1] && x + 1 != m) { // 오른쪽으로 이동
			q.push(make_pair(y, x + 1));
			move.push(cnt);
			graph[y][x + 1] = true;
		}
		if (!graph[y][x - 1] && x != 0) { // 왼쪽으로 이동
			q.push(make_pair(y, x - 1));
			move.push(cnt);
			graph[y][x - 1] = true;
		}
		if (!graph[y + 1][x] && y + 1 != n) { // 아래로 이동
			q.push(make_pair(y + 1, x));
			move.push(cnt);
			graph[y + 1][x] = true;
		}
		if (!graph[y - 1][x] && y != 0) { // 위로 이동
			q.push(make_pair(y - 1, x));
			move.push(cnt);
			graph[y - 1][x] = true;
		}
	}
}

int main() {
	ios::sync_with_stdio(false);
	cin.tie(NULL);
	cout.tie(NULL);

	string s;

	cin >> n >> m;

	for (int i = 0; i < n; i++) {
		cin >> s;
		for (int j = 0; j < m; j++) {
			if (s[j] == '1')
				graph[i][j] = false;
			else if (s[j] == '0')
				graph[i][j] = true;
		}
	}

	bfs();

	cout << cnt;

	return 0;
}
/*
2178 미로 탐색
*/
