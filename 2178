#include<iostream>
#include<cstring>
#include<queue>

using namespace std;

bool graph[101][101];
int min = 10001;
int m, n, x = 0, y = 0, cnt = 1, recu;



void bfs() {
	queue <pair<int, int>> q;
	q.push(make_pair(0, 0));
	graph[y][x] = true;
	cnt++;

	while (!q.empty()) {
		y = q.front().first;
		x = q.front().second;
		q.pop();
		int a, b;
		if (!graph[y][x + 1] && x + 1 != m) {
			a = y, b = x + 1;
			q.push(make_pair(a, b));
			graph[a][b] = true;
		}
		if (!graph[y - 1][x] && y - 1 != n) {
			a = y - 1, b = x;
			q.push(make_pair(a, b));
			graph[a][b] = true;
		}
		if (!graph[y + 1][x] && y != 0) {
			a = y + 1, b = x;
			q.push(make_pair(a, b));
			graph[a][b] = true;
		}

	}
}

int main() {
	ios::sync_with_stdio(false);
	cin.tie(NULL);
	cout.tie(NULL);

	string s;

	cin >> n >> m;

	for (int i = 0; i < n; i++) {
		cin >> s;
		for (int j = 0; j < m; j++) {
			if (s[j] == '1')
				graph[i][j] = 0;
			else if (s[j] == '1')
				graph[i][j] = 0;
		}
	}

	bfs();

	cout << cnt;

	return 0;
}
/*
2178 미로 탐색
*/
