#include<iostream>
#include<cstring>

using namespace std;

bool visited[10001];
bool graph[10001][501];

int r, c, x, pos, ans = 0;
string s;

void dfs(int y) {
	if (graph[y][x]) return;
	graph[y][x] = true;
	if (x == c - 1) ans++;

	x++;
	for (int i = -1; i < 2; i++) {
		if ((i == -1 && y == 0) || (i == 1 && y == r - 1)) continue;
		if (!graph[y + i][x] && x != c) {
			cout << i << " ";
			dfs(y + i);
		}
	}
}

int main() {
	ios::sync_with_stdio(false);
	cin.tie(NULL);
	cout.tie(NULL);

	memset(visited, 0, sizeof(visited));
	memset(graph, 0, sizeof(graph));

	cin >> r >> c;

	for (int i = 0; i < r; i++) {
		cin >> s;
		for (int j = 0; j < c; j++) {
			if (s[j] == '.')
				graph[i][j] = 0;
			else if (s[j] == 'x')
				graph[i][j] = 1;
		}
	}

	for (int i = 0; i < r; i++) {
		for (int j = 0; j < c; j++) {
			cout << graph[i][j];
		}
		cout << endl;
	}
	cout << endl;

	for (int i = 0; i < r; i++) {
		x = 0;
		dfs(i);

		cout << endl;
		for (int i = 0; i < r; i++) {
			for (int j = 0; j < c; j++) {
				cout << graph[i][j];
			}
			cout << endl;
		}
		cout << endl;
	}

	cout << ans;

	return 0;
}
/*
3109 빵집
5 5
.xx..
..x..
.....
...x.
...x.
6 10
..x.......
.....x....
.x....x...
...x...xx.
..........
....x.....
3 5
...x.
.x.x.
.x...
5 9
.x.....x.
.x..x..x.
.x..x..x.
....x....
.x..x..x.
*/
#include<iostream>
#include<cstring>

using namespace std;

bool visited[10001];
bool graph[10001][501];
bool ans;

int r, c, x, pos, cnt = 0;
string s;

void dfs(int y) {
	graph[y][x] = true;
	if (x == c - 1) {
		cnt++;
		ans = true;
	}

	for (int i = -1; i < 2; i++) {
		if ((i == -1 && y == 0) || (i == 1 && y == r - 1)) continue; // y 좌표가 위 아래 경계선에 있는 경우 위 아래로 못가도록 차단
		if (!graph[y + i][x + 1] && x < c - 1) { // 다음 지역을 방문하지 않았고 다음지역이 x좌표의 끝이 아닌경우
			x++;
			dfs(y + i);
			if (ans) return;
			x--;
		}
	}
}

int main() {
	ios::sync_with_stdio(false);
	cin.tie(NULL);
	cout.tie(NULL);

	memset(visited, 0, sizeof(visited));
	memset(graph, 0, sizeof(graph));

	cin >> r >> c;

	for (int i = 0; i < r; i++) {
		cin >> s;
		for (int j = 0; j < c; j++) {
			if (s[j] == '.')
				graph[i][j] = 0;
			else if (s[j] == 'x')
				graph[i][j] = 1;
		}
	}

	for (int i = 0; i < r; i++) {
		x = 0;
		ans = false;
		dfs(i);
	}

	cout << cnt;

	return 0;
}
/*
3109 빵집
x를 매번 바꿔주는 경우에서 많은 어려움을 겪었다.
x를 더해주는 자리는 잘 잡았지만 x를 빼주는 자리를 제대로 잡지못해 x가 더 더해지거나 목적지에 도달하고도 깔끔하게 끝나지 않는 경우들이 있었다.
bool ans를 활용하여 목적지에 도달한 경우에는 DFS 함수를 잘 빠져나올 수 있도록 탈출 조건을 더해주었다.
*/
